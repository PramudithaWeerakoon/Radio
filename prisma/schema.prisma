generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Stat {
  id     Int    @id @default(autoincrement())
  title  String
  value  String
  change String
  trend  String
}

model QuickAction {
  id    Int    @id @default(autoincrement())
  title String
  label String
  href  String
  icon  String
}

model RecentActivity {
  id          Int    @id @default(autoincrement())
  action      String
  description String
  timestamp   String
}

model Album {
  id            Int           @id @default(autoincrement())
  title         String
  release_date  DateTime?
  cover_art     String?
  description   String?
  youtube_id    String?
  tracks        Track[]
  album_credits AlbumCredit[]
}

model Track {
  id           Int           @id @default(autoincrement())
  title        String
  duration     String?
  track_number Int
  lyrics       String?
  album_id     Int
  album        Album         @relation(fields: [album_id], references: [id])
  youtube_id   String?
  credits      TrackCredit[]
}

model AlbumCredit {
  id       Int     @id @default(autoincrement())
  role     String
  name     String
  album_id Int
  album    Album   @relation(fields: [album_id], references: [id])
}

model TrackCredit {
  id       Int     @id @default(autoincrement())
  role     String
  name     String
  track_id Int
  track    Track   @relation(fields: [track_id], references: [id])
}

model Member {
  id              Int      @id @default(autoincrement())
  firstName       String
  lastName        String
  role            String
  
  // Change to match the Blog model's approach for storing images in DB
  imageName       String?  // Store the uploaded image filename
  imageData       Bytes?   // Store the actual binary image data
  imageMimeType   String?  // Store the image MIME type
  
  bio             String?
  joinDate        DateTime
  
  // Social media links
  facebook        String?
  twitter         String?
  instagram       String?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Event {
  id            Int      @id @default(autoincrement())
  title         String
  date          DateTime
  venue         String
  price         Float
  availableSeats Int
  imageUrl      String?
  description   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Blog {
  id            Int      @id @default(autoincrement())
  title         String
  category      String
  imageName     String?  // Store the uploaded image filename
  imageData     Bytes?   // Store the actual binary image data
  imageMimeType String?  // Store the image MIME type
  excerpt       String?
  content       String
  published     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
